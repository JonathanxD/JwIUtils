plugins {
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'org.ajoberstar.git-publish' version '3.0.0'
    id 'maven-publish'
}

group 'com.github.jonathanxd'
//version project.version

apply plugin: 'java'
apply plugin: 'license'

sourceCompatibility = 16

jar {
    manifest {
        attributes 'Implementation-Title': 'JwIUtils',
                'Implementation-Version': project.version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.jetbrains:annotations:15.0"
    testImplementation group: 'junit', name:'junit', version: '4.11'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    destinationDir = file("javadoc/")
    options.addBooleanOption('html5', true)
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.description = project.description
    ext.url = project.url
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.email = 'jonathan.scripter@programmer.net'

    exclude "**/*.info"
    exclude "**/*.md"
    exclude "**/*.json"
    exclude "res/**"
    exclude "src/main/resources/**"
    exclude "src/test/resources/**"
    exclude "**/ASM*.java"
    exclude "**/TypeTools*.java"
    
    header file('LICENSE_HEADER')
    
    sourceSets = project.sourceSets
    
    ignoreFailures false
    strictCheck true
    
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

gitPublish {
    repoUri = 'https://github.com/JonathanxD/JwIUtils.git'
    branch = 'gh-pages'

    repoDir = file("$buildDir/local_docs")

    contents {
        from 'src/pages'
        from(javadoc) {
            into 'api'
        }
    }

    commitMessage = 'Documentation'
}

publishing {
    repositories {
        maven {
            name = "Local"
            // change to point to your repo, e.g. http://my.org/repo
            url = "$buildDir/repo"
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/JonathanxD/jwiutils"
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
        maven {
            name = "GitLab"
            url "https://gitlab.com/api/v4/projects/28895078/packages/maven"
            credentials(HttpHeaderCredentials) {
                def ciToken = System.getenv("CI_JOB_TOKEN")
                if (ciToken != null && !ciToken.isEmpty()) {
                    name = "Job-Token"
                    value = System.getenv("CI_JOB_TOKEN")
                } else {
                    name = "Private-Token"
                    value = project.findProperty("GITLAB_TOKEN") ?: System.getenv("GITLAB_TOKEN")
                }
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
        maven {
            name = "GitLabJgang"
            url "https://gitlab.com/api/v4/projects/30392813/packages/maven"
            credentials(HttpHeaderCredentials) {
                def ciToken = System.getenv("CI_JOB_TOKEN")
                if (ciToken != null && !ciToken.isEmpty()) {
                    name = "Job-Token"
                    value = System.getenv("CI_JOB_TOKEN")
                } else {
                    name = "Private-Token"
                    value = project.findProperty("GITLAB_TOKEN") ?: System.getenv("GITLAB_TOKEN")
                }
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId 'jwiutils'
            from components.java

            artifact sourcesJar
        }
    }
}